{"version":3,"sources":["Components/NavBar/dev-mountain-logo.png","Components/StoreFront/StoreFront.js","Components/ShoppingCart/ShoppingCart.js","Components/NavBar/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","StoreFront","_this","this","productDisplay","props","products","map","element","index","react_default","a","createElement","className","key","title","src","image","alt","desc","price","onClick","addToCart","Component","ShoppingCart","shoppingCartDisplay","shoppingCart","removeFromCart","NavBar","Logo","navigate","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","cart","showCart","bind","assertThisInitialized","_this2","axios","get","then","response","setState","item","cartCopy","slice","splice","location","_this$state","Components_NavBar_NavBar","Components_ShoppingCart_ShoppingCart","Components_StoreFront_StoreFront","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.269e11cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dev-mountain-logo.1528570d.png\";","import React, { Component } from 'react';\nimport './StoreFront.css';\n\nclass StoreFront extends Component {\n  render() {\n    let productDisplay = this.props.products.map((element, index) => {\n      return (\n        <div className=\"product-container\" key={index}>\n          <h2>{element.title}</h2>\n          <img src={element.image} alt=\"\" />\n          <h2>{element.desc}</h2>\n          <h3>{\"$\" + element.price + \".00\"}</h3>\n          <button onClick={() => this.props.addToCart(element)}>Purchase!</button>\n        </div>\n      )\n    })\n    return (\n      <div className=\"storefront-container\">\n        {productDisplay}\n      </div>\n    )\n  }\n}\n\nexport default StoreFront;","import React, { Component } from \"react\";\nimport \"./ShoppingCart.css\";\n\nclass ShoppingCart extends Component {\n  render() {\n    let shoppingCartDisplay = this.props.shoppingCart.map((element, index) => {\n      return (\n        <div className=\"shopping-cart-product-container\" key={index}>\n          <img src={element.image} alt=\"\" />\n          <div className=\"shopping-cart-info\">\n            <h2>{element}</h2>\n            <h2>{\"$\" + element.price + \".00\"}</h2>\n            <div className=\"shopping-cart-button-container\">\n              <button\n                className=\"shopping-cart-button\"\n                onClick={() => this.props.removeFromCart(element)}\n              >\n                Remove From Shopping Cart\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    });\n    return (\n      <div className=\"shopping-cart-container\">\n        {shoppingCartDisplay[0] ? (\n          shoppingCartDisplay\n        ) : (\n          <div className=\"go-buy-something\">\n            <h1>Your shopping cart is empty! Go buy something!</h1>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default ShoppingCart;\n","import React, { Component } from 'react';\nimport './NavBar.css';\nimport Logo from './dev-mountain-logo.png'\n\nclass NavBar extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"navbar-container\">\n          <div className=\"logo-container\">\n            <img className=\"logo-image\" src={Logo} alt=\"\" />\n          </div>\n\n          <div className=\"navbar-links-container\">\n            <ul className=\"navbar-links\">\n              <li onClick={() => this.props.navigate('store')}>Store</li>\n              <li onClick={() => this.props.navigate('cart')}>Shopping Cart</li>\n            </ul>\n          </div>\n        </div>\n        <hr />\n      </div>\n    );\n  }\n}\n\nexport default NavBar;","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport StoreFront from \"./Components/StoreFront/StoreFront\";\nimport ShoppingCart from \"./Components/ShoppingCart/ShoppingCart\";\nimport NavBar from \"./Components/NavBar/NavBar\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      products: [],\n      cart: [],\n      showCart: false\n    };\n    this.addToCart = this.addToCart.bind(this);\n    this.removeFromCart = this.removeFromCart.bind(this);\n    this.navigate = this.navigate.bind(this);\n  }\n  componentDidMount() {\n    axios\n      .get(\"https://practiceapi.devmountain.com/products/\")\n      .then(response => {\n        this.setState({\n          products: response\n        });\n      });\n  }\n  addToCart(item) {\n    this.setState({\n      cart: item\n    });\n  }\n  removeFromCart(index) {\n    let cartCopy = this.state.products.slice();\n    cartCopy.splice(index, 1);\n    this.setState({\n      cart: cartCopy\n    });\n  }\n  navigate(location) {\n    if (location === \"cart\") {\n      this.setState({\n        showCart: true\n      });\n    } else {\n      this.setState({\n        showCart: false\n      });\n    }\n  }\n  render() {\n    const { products, cart, showCart } = this.state;\n    return (\n      <div className=\"App\">\n        <NavBar navigate={this.navigate} />\n        <div className=\"main-container\">\n          {showCart ? (\n            <ShoppingCart cart={cart} removeFromCart={this.removeFromCart} />\n          ) : (\n            <StoreFront products={products} addToCart={this.addToCart} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}